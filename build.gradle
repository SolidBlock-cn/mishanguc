plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
    id "com.github.breadmoirai.github-release" version "2.5.2"
}

import com.modrinth.minotaur.dependencies.ModDependency

base {
    archivesName = project.archives_base_name
}
version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // BRRP. This is stored locally.
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url 'https://jitpack.io' }
     maven {
        url 'https://raw.githubusercontent.com/SolidBlock-cn/mvn-repo/main'

        // 如果上面的网址连接不成功，可以尝试使用镜像站，例如：
        // url 'https://raw.nuaa.cf/SolidBlock-cn/mvn-repo/main'
        // 注：不确保镜像站能稳定连接且内容不被篡改，上述镜像站地址亦只是示例。
    }
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    def brrp_mc_version = project.hasProperty("brrp_mc_version") ? project.brrp_mc_version : project.minecraft_version

    // BRRP.
    modImplementation("pers.solid:brrp-fabric:${project.brrp_version}-${brrp_mc_version}") {
        transitive false
    }
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 upwards uses Java 17.
    it.options.release = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }


    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

/**
 * 从 UpdateLog-en.md 中提取更新日志
 */
String getUpdateLog(String modVersion = project.mod_version) {
    StringBuilder builder = new StringBuilder()
    boolean start = false
    new File('UpdateLog-en.md').eachLine {
        if (it.matches("^###\\s*" + modVersion + '$')) {
            start = true
        } else if (it.startsWith("###")) {
            start = false
        } else if (start) {
            builder.append it
            builder.append '\n'
        }
        return
    }
    return builder.toString().trim()
}
