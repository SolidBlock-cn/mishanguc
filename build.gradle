plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    // Quiltflower 反编译器
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    id 'maven-publish'

    // Modrinth
    id "com.modrinth.minotaur" version "2.+"
    // CurseGradle
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

quiltflower {
    quiltflowerVersion = '1.8.1'
}


import com.modrinth.minotaur.dependencies.ModDependency

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // BRRP. This is stored locally.
    mavenLocal()
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    def brrp_mc_version = project.hasProperty("brrp_mc_version") ? project.brrp_mc_version : project.minecraft_version

    // BRRP.
    modImplementation("pers.solid:brrp-fabric:${project.brrp_version}-${brrp_mc_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }


    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

/**
 * 从 UpdateLog-en.md 中提取更新日志
 */
String getUpdateLog(String modVersion = project.mod_version) {
    StringBuilder builder = new StringBuilder()
    boolean start = false
    new File('UpdateLog-en.md').eachLine {
        if (it.matches("^###\\s*" + modVersion + '$')) {
            start = true
        } else if (it.startsWith("###")) {
            start = false
        } else if (start) {
            builder.append it
            builder.append '\n'
        }
        return
    }
    return builder.toString().trim()
}

println "当前版本（${project.mod_version}）更新记录："
final var content = getUpdateLog(project.mod_version)
println content

curseforge {
    try {
        apiKey = new File('apiKey.txt').text
    } catch (IOException ignore) {
        apiKey = ' '
    }
    println "CurseForge 令牌：【${apiKey}】"
    project {
        id = '583071'
        changelog = content
        changelogType = 'markdown'
        releaseType = 'release'
        mainArtifact remapJar

        for (final def v in (project.supported_versions.split(',') as String[])) {
            addGameVersion v
        }

        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'better-runtime-resource-pack'
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

// 将模组发布至 Modrinth

modrinth {
    println "Modrinth 令牌：【${token.get()}】"

    projectId = "rItLmRo4" // 迷上城建模组的 Modrinth ID
    versionNumber = project.mod_version + '-' + project.minecraft_version
    versionType = 'release'
    uploadFile = remapJar
    gameVersions = Arrays.asList(project.supported_versions.split(','))

    changelog = content

    loaders = ['fabric']

    dependencies = [
            new ModDependency('P7dR8mSH', 'required'), // Fabric API
            new ModDependency('JnrDtPAE', 'required')
    ]

    String text = rootProject.file('README-en.md').text.replaceAll("\\[(.*?)]\\(([^/]*?)\\)", '[$1](https://github.com/SolidBlock-cn/mishanguc/blob/1.19.2/$2)')
    syncBodyFrom = text
}

task publishToModSites {
    publishToModSites.dependsOn modrinth
    publishToModSites.dependsOn curseforge
}