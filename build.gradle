plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'

    // Modrinth
    id "com.modrinth.minotaur" version "2.+"
}


import com.modrinth.minotaur.dependencies.ModDependency
import org.apache.commons.io.FileUtils

import java.nio.charset.Charset

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // BRRP. This is stored locally.
    flatDir { dir "..\\BRRP\\build\\libs" }
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    def brrp_mc_version = project.hasProperty("brrp_mc_version") ? project.brrp_mc_version : project.minecraft_version

    // BRRP.
    modImplementation("net.devtech:brrp:${project.brrp_version}-${project.minecraft_version}")
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }


    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

// 将模组发布至 Modrinth

modrinth {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
    println "输入 GitHub 访问令牌（https://modrinth.com/dashboard/settings）："

    token = br.readLine() // 获取你在本教程的基础部分得到的GitHub访问令牌。
    projectId = "rItLmRo4" // 迷上城建模组的 Modrinth ID
    versionNumber = project.mod_version + '-' + project.minecraft_version
    versionType = 'beta'
    uploadFile = remapJar // 这链接到一个构建你的 mod jar 文件的任务，并将 "uploadFile" 设置为 mod jar。
    gameVersions = Arrays.asList(project.minotaur_supported_versions.split(','))


    var lines = FileUtils.readLines(new File('UpdateLog-en.md'), Charset.defaultCharset())
    StringBuilder builder = new StringBuilder()
    def iterator = lines.iterator()
    while (iterator.hasNext()) {
        var line = iterator.next()
        if (line.matches("^###\\s*" + project.mod_version + '$')) {
            while (iterator.hasNext()) {
                var line2 = iterator.next()
                println line2
                if (line2.startsWith("###")) {
                    break
                }
                builder.append(line2)
                builder.append('\n')
            }
            break
        }
    }
    var content = builder.toString().trim()
    println "当前版本更新记录："
    println content
    changelog = content

    loaders = ['fabric']

    dependencies = [
            new ModDependency('P7dR8mSH', 'required'), // Fabric API
            new ModDependency('JnrDtPAE', 'required')
    ]
}